- name: Stop vault
  ansible.builtin.systemd:
    name: vault
    state: stopped

- name: Find vault configuration files
  when: purge is defined and purge
  find:
    paths: ["/etc/vault.d"]
    pattern: "*.hcl"
  register: files_to_delete

- name: Find vault state files
  when: purge is defined and purge
  find:
    paths: ["/opt/nomad"]
  register: files2_to_delete

- name: Remove vault configuration files
  when: purge is defined and purge
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files + files2_to_delete.files }}"

- name: Remove nomad bastion configuration files
  when: purge is defined and purge
  file:
    path: "{{ item }}"
    state: absent
  with_items: ["/opt/ad/vault"]
  run_once: true
  delegate_to: bastion

- name: Create Vault install subfolder
  run_once: true
  delegate_to: bastion
  file: 
    path: /opt/ad/vault
    state: directory
    owner: root
    group: root
    mode: "600"


- name: Check If TLS Certs Generated
  stat:
    path: /opt/ad/vault/vault.cert
  register: cert_file
  run_once: true
  delegate_to: bastion

- name: Generate TLS Certs
  when: not cert_file.stat.exists
  run_once: true
  delegate_to: bastion
  register: consul_vault_output
  command: openssl req -nodes -new -x509 -keyout /opt/ad/vault/vault.key -out /opt/ad/vault/vault.cert -days 3650 -subj '/CN=vault.service.consul'

- name: Check If Consul Vault Key Generated
  stat:
    path: "/opt/ad/vault/consul-token-{{ consul_acl }}"
  register: v_key
  run_once: true
  delegate_to: bastion

- name: Get Consul Mgmt Token
  slurp: 
    src: /opt/ad/consul/consul-bootstrap
  run_once: true
  register: consul_mgmt_key_b64
  delegate_to: bastion

- name: Generate Vault Token
  when: not v_key.stat.exists
  run_once: true
  delegate_to: bastion
  register: consul_vault_output
  shell: consul acl token create -policy-name "{{ consul_acl }}" -token "{{ consul_mgmt_key_b64.content | b64decode | trim }}" -http-addr="{{ bootstrap_addr }}" | grep --color=never -oP 'SecretID:\s*\K.+'
- name: Persist Vault Token
  run_once: true
  delegate_to: bastion
  when: not v_key.stat.exists
  copy:
    content: "{{ consul_vault_output.stdout_lines[0] }}"
    dest: "/opt/ad/vault/consul-token-{{ consul_acl }}"

- name: Wait
  when: not v_key.stat.exists
  pause:
    seconds: 5

- name: Get Consul Vault Token
  delegate_to: bastion
  run_once: True
  slurp: 
    src: "/opt/ad/vault/consul-token-{{ consul_acl }}"
  register: consul_vault_key_b64

- name: Add Config Folder
  file:
    state: directory
    owner: vault
    group: vault
    mode: "700"
    path: /etc/vault.d

- name: Install Vault Config
  template:
    src: "config/{{ item }}"
    owner: vault
    group: vault
    mode: "600"
    dest: /etc/vault.d/ 
  with_items: ["vault.hcl", "vault.env"]
- name: Make Certs Readable
  delegate_to: bastion
  run_once: True
  file: 
    path: "/opt/ad/vault/{{ item }}"
    mode: "644"
  with_items: ["vault.key", "vault.cert"]

- name: Make Data Readable
  delegate_to: bastion
  run_once: True
  file: 
    path: "/opt/{{ item }}"
    mode: "755"
  with_items: ["ad", "ad/vault"]

- name: Install Vault Certs
  template:
    src: "/opt/ad/vault/{{ item }}"
    dest: "/opt/vault"
    owner: "vault"
    group: "vault"
    mode: "600"
  with_items: ["vault.key", "vault.cert"]

- name: Make Data UnReadable
  delegate_to: bastion
  run_once: True
  file: 
    path: "/opt/{{ item }}"
    mode: "700"
  with_items: ["ad/vault"]

- name: Start and Enable vault
  ansible.builtin.systemd:
    name: vault
    enabled: true
    state: started