- name: Stop Consul
  ansible.builtin.systemd:
    name: consul
    state: stopped

- name: Find existing Data
  when: purge is defined and purge
  find:
    paths: ["/opt/consul"]
  register: files_to_delete

- name: Remove Existing Data
  when: purge is defined and purge
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"


- name: Remove Existing Bastion Data
  when: purge is defined and purge
  file:
    path: "{{ item }}"
    state: absent
  with_items:  ["/etc/consul-policies/", "/etc/consul-bootstrap", "/etc/consul-agent-token"]

- name: Start and Enable Consul
  ansible.builtin.systemd:
    name: consul
    enabled: true
    state: started

- name: Check If Bootsrapped
  stat:
    path: /etc/consul-bootstrap
  register: consul_bs_file
  run_once: true
  delegate_to: bastion

- name: Wait for Consul to start
  run_once: true
  delegate_to: bastion
  wait_for:
    port: 8500
    host: "{{ groups['consul_servers'][0] }}"
- pause: 
    seconds: 120
  when: not consul_bs_file.stat.exists or (purge is defined and purge)

- name: Generate Bootstrap Token
  shell: consul acl bootstrap -http-addr="{{bootstrap_addr}}" | grep --color=never -oP 'SecretID:\s*\K.+'
  run_once: true
  register: acl_create_res
  delegate_to: bastion
  when: not consul_bs_file.stat.exists or (purge is defined and purge)
- debug:
    var: acl_create_res
  when: not consul_bs_file.stat.exists or (purge is defined and purge)

- name: Persist Bootstrap token
  when: not consul_bs_file.stat.exists or (purge is defined and purge)
  run_once: true
  delegate_to: bastion
  copy:
    content: "{{ acl_create_res.stdout_lines[0] }}"
    dest: /etc/consul-bootstrap

- name: wait for sync
  pause:
    seconds: 5

- name: Get Secret
  slurp: 
    src: /etc/consul-bootstrap 
  register: secret_id_b64
  changed_when: false
  delegate_to: bastion
  run_once: True


- name: Copy Policies
  delegate_to: bastion
  run_once: true
  ansible.builtin.copy:
    src: ../consul-policies
    dest: "/etc/"
    owner: root
    group: root
    mode: "600"
- name: "Add all policies to Consul"
  delegate_to: bastion
  run_once: true
  script:
    cmd: ../scripts/addPolicies.sh "{{ secret_id_b64.content | b64decode | trim }}" "{{ bootstrap_addr }}"
    chdir: "/etc/consul-policies"

- pause: 
    seconds: 30
- name: Check If Agent Token Generated
  stat:
    path: /etc/consul-agent-token
  register: consul_agent_file
  run_once: true
  delegate_to: bastion

- name: Generate Agent Token
  delegate_to: bastion
  run_once: true
  when: not consul_agent_file.stat.exists or (purge is defined and purge)
  register: agent_token
  shell: consul acl token create -http-addr="{{bootstrap_addr}}" -token "{{ secret_id_b64.content | b64decode | trim }}" -policy-name consul-agent-policy | grep --color=never -oP 'SecretID:\s*\K.+'

- name: Persist Agent token
  when: not consul_agent_file.stat.exists or (purge is defined and purge)
  run_once: true
  delegate_to: bastion
  copy:
    content: "{{ agent_token.stdout_lines[0] }}"
    dest: /etc/consul-agent-token

- name: wait for sync
  pause:
    seconds: 5

- name: Get Agent Token
  slurp: 
    src: /etc/consul-agent-token 
  register: secret_agent_b64
  changed_when: false
  delegate_to: bastion
  run_once: True

- name: Install Token on Agent
  command: consul acl set-agent-token -token {{ secret_id_b64.content | b64decode | trim }} agent "{{ secret_agent_b64.content | b64decode | trim }}"

- name: Restrict access to files
  delegate_to: bastion
  run_once: True
  file:
    path: "{{ item }}"
    mode: "0600"
    owner: root
    group: root
  with_items: ["/etc/consul-bootstrap","/etc/consul-agent-token"]



